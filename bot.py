import telebot
import logging
import base64
import io
from config import TELEGRAM_BOT_TOKEN, setup_logging_globally, FUSIONBRAIN_URL, FUSIONBRAIN_API_KEY, FUSIONBRAIN_SECRET_KEY
from llm_agent import GigaChatManagerAssistant
from image_generator import FusionBrainAPI

setup_logging_globally()
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
gigachat_manager = GigaChatManagerAssistant()

try:
    fusionbrain_api = FusionBrainAPI(
        FUSIONBRAIN_URL, FUSIONBRAIN_API_KEY, FUSIONBRAIN_SECRET_KEY
    )
    pipeline_id = fusionbrain_api.get_pipeline()
    logger.info(f"FusionBrain pipeline ID: {pipeline_id}")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FusionBrain: {e}")
    fusionbrain_api = None
    pipeline_id = None

participants = {
    "–Ω–∞–¥–µ–∂–¥–∞": {
        "name": "–°–æ—Ä–≤–∞–Ω–æ–≤–∞ –ù–∞–¥–µ–∂–¥–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",
        "role": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑—É",
        "raw_data": "–ì–∏–±–∫–æ—Å—Ç—å, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å, —ç–º–ø–∞—Ç–∏—è, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
        "aliases": ["–Ω–∞–¥–µ–∂–¥–∞", "–Ω–∞–¥—è", "—Å–æ—Ä–≤–∞–Ω–æ–≤–∞", "–Ω–∞–¥–µ–Ω—å–∫–∞"],
        "gender": "–∂–µ–Ω—â–∏–Ω–∞",
        "age": "27-30"
    },
    "—é–ª–∏—è": {
        "name": "–ñ–¥–∞–Ω–æ–≤–∞ –Æ–ª–∏—è –ë–æ—Ä–∏—Å–æ–≤–Ω–∞",
        "role": "–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏–¥–µ–π –∏ –∫–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫",
        "raw_data": "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ–±—É—á–∞–µ–º–æ—Å—Ç—å, –ø–æ–∏—Å–∫ –∏–¥–µ–π, –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞. –•–æ—á–µ—Ç—Å—è –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤",
        "aliases": ["—é–ª–∏—è", "—é–ª—è", "–∂–¥–∞–Ω–æ–≤–∞", "—é–ª–µ—á–∫–∞"],
        "gender": "–∂–µ–Ω—â–∏–Ω–∞",
        "age": "30-35"
    },
    "–∏–≤–∞–Ω": {
        "name": "–ñ–∞–¥–∞–Ω –ò–≤–∞–Ω –í–∞–ª–µ—Ä—å–µ–≤–∏—á",
        "role": "–ò–¥–µ–æ–ª–æ–≥ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä",
        "raw_data": "–û—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é —Å—ã—Ä—ã–µ –∏–¥–µ–∏, –±–æ–ª—å—à–∞—è –Ω–∞—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ—Å—Ç—å, –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –±—ã—Ç–∞ –∫–∞–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è —Å –∏–¥–µ—è–º–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é. –ú–æ–≥—É –Ω–∞–π—Ç–∏ –æ–±—â–∏–π —è–∑—ã–∫ –∏ —Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ª—é–±—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º",
        "aliases": ["–∏–≤–∞–Ω", "–≤–∞–Ω—è", "–∂–∞–¥–∞–Ω", "–∏–≤–∞–Ω—ã—á"],
        "gender": "–º—É–∂—á–∏–Ω–∞",
        "age": "22-25"
    },
    "–µ–≤–≥–µ–Ω–∏–π": {
        "name": "–°–µ—Ä–¥—é–∫–æ–≤ –ï–≤–≥–µ–Ω–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
        "role": "–õ–∏–¥–µ—Ä –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–¥–µ–π",
        "raw_data": "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–¥—Ä–∞–≤—ã–µ –∏–¥–µ–∏ –∏ –∏–¥—Ç–∏ –∫ –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏... –£—Å–ø–µ–≤–∞–µ—Ç –≤—Å—ë, –∫—Ä–æ–º–µ —Å–Ω–∞...",
        "aliases": ["–µ–≤–≥–µ–Ω–∏–π", "–∂–µ–Ω—è", "—Å–µ—Ä–¥—é–∫–æ–≤", "–∂–µ–∫–∞"],
        "gender": "–º—É–∂—á–∏–Ω–∞",
        "age": "28-35"
    },
    "–≤–æ–ª–æ–¥—è": {
        "name": "–ê—Ç–æ—è–Ω –í–æ–ª–æ–¥—è –ê—Ä–∞—Ä–∞—Ç–æ–≤–∏—á",
        "role": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä",
        "raw_data": "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, —É–º–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã, –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª—é–±—ã–º–∏ –ø—É—Ç—è–º–∏, —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –Ω–∞ —Ç—ã, –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤, –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–µ–ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–¥–æ–≤ –ø—É—Ç–µ–º –≤–∞–π–± –∫–æ–¥–∏–Ω–≥–∞. –õ–µ–≥–æ–∫ –≤ –æ–±—â–µ–Ω–∏–∏, –∫–æ–º–∞–Ω–¥–Ω—ã–π",
        "aliases": ["–í–æ–ª–æ–¥—é", "–≤–æ–≤–∞", "–∞—Ç–æ—è–Ω", "–≤–æ–ª–æ–¥–∏–∫"],
        "gender": "–º—É–∂—á–∏–Ω–∞",
        "age": "23"
    },
    "–∞–Ω–¥—Ä–µ–π": {
        "name": "–ü–∞–Ω–∏–Ω –ê–Ω–¥—Ä–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
        "role": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏ –∏–¥–µ–π–Ω—ã–π –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å",
        "raw_data": "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∏ –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π... –°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤, –≥–∏–±–æ–∫ –∏ –ª–µ–≥–∫–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
        "aliases": ["–∞–Ω–¥—Ä–µ–π", "–∞–Ω–¥—Ä—é—Ö–∞", "–ø–∞–Ω–∏–Ω", "–∞–Ω–¥—Ä–µ–π–∫–∞"],
        "gender": "–º—É–∂—á–∏–Ω–∞",
        "age": "22-23"
    }
}


summary_system_prompt = """
–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞—é—â–∏–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑–∏—Ç–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∂—é—Ä–∏. 
–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —á–µ–ª–æ–≤–µ–∫–µ, —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏: 
- –ù–∞—á–Ω–∏ —Å –∏–º–µ–Ω–∏ –∏ —Ä–æ–ª–∏.
- –û–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.
- –î–æ–±–∞–≤—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–ª–∏ –æ–ø—ã—Ç.
- –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º, –Ω–µ –±–æ–ª–µ–µ 150 —Å–ª–æ–≤.
- –§–æ—Ä–º–∞—Ç: –∫–∞–∫ –≤–∏–∑–∏—Ç–∫–∞, —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–í–∏–∑–∏—Ç–∫–∞: [–ò–º—è]".
"""

image_prompt_system = """
–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ —á–µ–ª–æ–≤–µ–∫–µ, —Å–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –≤ Kandinsky. 
–ü—Ä–æ–º–ø—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ —Å–ª–æ–≤: –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∫–æ–¥, —Å–µ—Ä–≤–µ—Ä—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –í–∫–ª—é—á–∏:
- –ü–æ—Ä—Ç—Ä–µ—Ç [–ò–º—è] ([–ø–æ–ª: –º—É–∂—á–∏–Ω–∞/–∂–µ–Ω—â–∏–Ω–∞]) –≤ —Ä–æ–ª–∏ [role], –≤–æ–∑—Ä–∞—Å—Ç [age].
- –í–Ω–µ—à–Ω–æ—Å—Ç—å –ø–æ –∫–∞—á–µ—Å—Ç–≤–∞–º (—É–ª—ã–±–∫–∞ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ª–∏–¥–µ—Ä–∞).
- –§–æ–Ω: –æ—Ñ–∏—Å, –ø—Ä–∏—Ä–æ–¥–∞ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞.
- –°—Ç–∏–ª—å: PIXAR.
–ü—Ä–∏–º–µ—Ä: '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –∂–µ–Ω—â–∏–Ω—ã-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ 30-35 –ª–µ—Ç –≤ –æ—Ñ–∏—Å–µ, —É–ª—ã–±–∫–∞, —Å–≤–µ—Ç–ª–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ'.
"""

@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –∫–æ–º–∞–Ω–¥–µ '–û–≥–Ω–ò–ò', –≥–¥–µ –æ–≥–æ–Ω—å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. üòé –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—à–∏—Ö –∫—Ä—É—Ç—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏: '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ [–∏–º—è]' –∏–ª–∏ '–¥–∞–≤–∞–π –ø—Ä–æ [–∏–º—è]'. –ù–∞–ø—Ä–∏–º–µ—Ä, '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ù–∞–¥–µ–∂–¥—É'. –° –∫–æ–≥–æ –Ω–∞—á–Ω—ë–º?"
    bot.reply_to(message, welcome_text)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    text = message.text.lower()
    found_participant = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ ..." –∏–ª–∏ "–¥–∞–≤–∞–π –ø—Ä–æ ..."
    if "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ " in text or "–¥–∞–≤–∞–π –ø—Ä–æ " in text:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ—Å–ª–µ —Ñ—Ä–∞–∑—ã
        for data in participants.values():
            for alias in data["aliases"]:
                if f"—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ {alias}" in text or f"–¥–∞–≤–∞–π –ø—Ä–æ {alias}" in text:
                    found_participant = data
                    break
            if found_participant:
                break
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ –∏–º—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        for data in participants.values():
            if any(alias in text for alias in data["aliases"]):
                found_participant = data
                break
    
    if found_participant:
        raw_data = found_participant['raw_data']
        name = found_participant['name']
        
        summary_user_prompt = f"–°–æ–∑–¥–∞–π –≤–∏–∑–∏—Ç–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö: –ò–º—è: {found_participant['name']}, –†–æ–ª—å: {found_participant['role']}, –î–∞–Ω–Ω—ã–µ: {raw_data}"
        summary = gigachat_manager.get_analysis(summary_system_prompt, summary_user_prompt)
        bot.reply_to(message, summary)
        
        image_prompt_user = f"–°–æ–∑–¥–∞–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Kandinsky: {raw_data} (–ø–æ–ª: {found_participant['gender']}, –≤–æ–∑—Ä–∞—Å—Ç: {found_participant['age']})"
        image_prompt = gigachat_manager.get_analysis(image_prompt_system, image_prompt_user)
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º: {image_prompt}")
        
        if fusionbrain_api and pipeline_id:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è {name}")
            uuid = fusionbrain_api.generate(image_prompt, pipeline_id)
            files = fusionbrain_api.check_generation(uuid)
            try:
                uuid = fusionbrain_api.generate(image_prompt, pipeline_id)
                files = fusionbrain_api.check_generation(uuid)
                if files and len(files) > 0:
                    img_base64 = files[0]
                    img_data = base64.b64decode(img_base64)
                    bio = io.BytesIO(img_data)
                    bio.name = 'generated_image.jpg'
                    bot.send_photo(message.chat.id, bio, caption=f"–ü–æ—Ä—Ç—Ä–µ—Ç {name} –æ—Ç Kandinsky üé®")
                else:
                    bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∞).")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                bot.reply_to(message, f"–¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å: {str(e)}")
        else:
            bot.reply_to(message, "–¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    else:
        participant_names = ", ".join([data['name'] for data in participants.values()])
        bot.reply_to(message, f"–ù–µ –ø–æ–Ω—è–ª, –ø—Ä–æ –∫–æ–≥–æ —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å. –í–æ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participant_names}. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ [–∏–º—è]' –∏–ª–∏ '–¥–∞–≤–∞–π –ø—Ä–æ [–∏–º—è]'.")

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    bot.polling(none_stop=True)